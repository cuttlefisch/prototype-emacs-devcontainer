* Emacs Dev Container
This experimental Docker image & its compose file stand up a VS Code Dev Container with
the latest Emacs build running as a daemon. The intended use-case is an integrated
Emacs/VS Code Dev Container experience, leveraging Emacs's extensive existing workflow
tooling to provide enhanced functionality around workspace management.

*NOTE:* This project does not yet implement the [[https://containers.dev/implementors/spec/][Open Development Container Specification]].

* Basic Usage
Launch a Dev Container:
 - Clone this repository
 - Open the repository folder in VS Code
 - Have some tea, fresh build & configuration takes several minutes.
 - That's it! Use the workspace within VS Code or another Editor.

By default ~PROJECT.yaml~ is installed via [[https://github.com/cuttlefisch/declarative-project-mode][declarative-project-mode]], providing a workspace
to edit this repository, along with the [[https://github.com/cuttlefisch/declarative-project-mode][source repository]] for ~declarative-project-mode~.

Change to ~emacs-devcontainer-base~ or ~emacs-devcontainer-doom~ within
~.devcontainer/devcontainer.js~ to start with an empty workspace.

* Use without VS Code
Simply launch the container with docker-compose and connect to the new container to edit.
However, note that there are currently no additional features available for other editors.

#+begin_src sh :noeval
docker-compose up emacs-devcontainer-projects
#+end_src

* Install a Project
Install an example project in a fresh Dev Container using the provided example
~PROJECT.yaml~ file. Seen here is a more detailed example of the Project specification
from [[https://github.com/cuttlefisch/declarative-project-mode][declarative-project-mode]], with file-paths updated for VS Code Dev Containers.

#+begin_src yaml
name: "Emacs-Enhanced Dev Containers"
root-directory: "/home/vscode/workspaces"
deps:
  - src: https://github.com/cuttlefisch/declarative-project-mode
  - src: https://github.com/cuttlefisch/prototype-emacs-devcontainer
local-files:
  - src: /workspaces/source/README.org
    dest: README.org
  - src: /workspaces/source/PROJECT.yaml
required-resources:
  - README.org
#+end_src

After launching the Dev Container we have the following ~/home/vscode/workspaces~:
#+begin_src
/home/vscode/workspaces/
|-- PROJECT.yaml
|-- README.org
|-- declarative-project-mode
|   |-- CODEOWNERS
|   |-- LICENSE
|   |-- README.org
|   |-- declarative-project-mode-test.el
|   |-- declarative-project-mode.el
|   `-- test
|       |-- local-file.txt
|       |-- symlink-target.txt
|       |-- test-file-present.txt
|       `-- test-project.yaml
`-- prototype-emacs-devcontainer
    |-- CODEOWNERS
    |-- PROJECT.yaml
    |-- README.org
    |-- build-resources
    |   |-- install-base.sh
    |   `-- install-projects.sh
    |-- config
    |   `-- AUTHINFO_EXAMPLE
    |-- docker-compose.yaml
    `-- images
        |-- base
        |   `-- Dockerfile
        |-- doom
        |   `-- Dockerfile
        `-- projects
            `-- Dockerfile
#+end_src

*NOTE:*
 - Only HTTPS git urls are currently supported.
     - This avoids complexity around ssh-agent forwarding, while supporting private
       repositories using HTTPS urls.
 - Symlinks won't work for Dev Containers, use ~local-files~ to specify resources to copy
   into the Dev Container's workspace.


* Provided Images
** Projects
This image launches with an Emacs daemon that installs a default project file defined at
~/workspaces/source/PROJECT.el~.

It's possible to install a project directly with elisp like so:
~(declarative-project--install-project-from-file "/workspaces/source/PROJECT.el")~
(substituting the desired path for the default path shown).

See the later section for declarative project mode details.

Image: ~emacs-devcontainer-projects:latest~

** Base
Simple Emacs daemon with the [[https://github.com/radian-software/straight.el][straight.el]] package manager installed for simple declarative
configuration.

Image: ~emacs-devcontainer-base:latest~

** Doom
Emacs daemon with [[https://github.com/doomemacs/doomemacs][Doom Emacs]] installed. Useful for testing with more comfort, but needs
review of how it obliterates ~init.el~.

Image: ~emacs-devcontainer-doom:latest~

* Declarative Project Mode
This project serves as the base for Dev Container definitions generated through
[[https://github.com/cuttlefisch/declarative-project-mode][declarative-project-mode]], a global mode that allows Emacs to install generalized
"projects" that create a reproducible development environment.

Integration with Dev Containers means installation & maintenance of projects via Emacs
becomes a matter of calling elisp commands either via command-line or another convenient
interface, and VS Code users can gain many benefits of Emacs's extensibility without the
complexity of configuring, running, and maintaining it themselves.

*But!* The resulting configuration serves as a starting point for reproducible
containerized Emacs workspaces via Dev Containers in the same manner. Declarative Project
Mode will likely generate an Emacs-specific Dev Container configuration as the project
matures.

* Resources
 - Check out [[https://github.com/doomemacs/doomemacs][Doom Emacs]] if you're curious about Emacs and want to get up and running
   quickly!
